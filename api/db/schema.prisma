datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum UserRole {
  USER
  ANALYST
  MODERATOR
  ADMIN
}

model User {
  id                  String    @id @default(uuid())
  name                String
  email               String    @unique
  hashedPassword      String
  salt                String
  votes               Vote[]
  comments            Comment[]
  problems            Problem[]
  markers             Marker[]
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               UserRole  @default(USER)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Marker {
  id        String   @id @default(uuid())
  lat       Float
  lng       Float
  problem   Problem?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  problems  Problem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ProblemStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  REJECTED
}

model Problem {
  id          String        @id @default(uuid())
  title       String
  description String
  votes       Vote[]
  comments    Comment[]
  images      Image[]
  category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  String?
  marker      Marker?       @relation(fields: [markerId], references: [id])
  markerId    String?       @unique
  user        User?         @relation(fields: [userId], references: [id])
  userId      String?
  status      ProblemStatus @default(OPEN)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  filename  String
  path      String
  problem   Problem? @relation(fields: [problemId], references: [id])
  problemId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  problem   Problem? @relation(fields: [problemId], references: [id])
  problemId String?
}

model Vote {
  id        String   @id @default(uuid())
  upvote    Boolean  @default(true)
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  problem   Problem? @relation(fields: [problemId], references: [id])
  problemId String?

  @@unique([userId, problemId])
}
